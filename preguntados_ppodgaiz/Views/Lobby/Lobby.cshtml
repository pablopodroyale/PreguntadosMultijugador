@model List<preguntados_ppodgaiz.Models.Dominio.Player>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-layout carded full-width single-scroll">
    <div class="top-bg bg-deep-purple-100 "></div>
    <!-- CONTENT -->
    <div class="page-content-wrapper">

        <!-- HEADER -->
        <div class="page-header light-fg row no-gutters align-items-center justify-content-between">

            <!-- APP TITLE -->
            <div class="col-12 col-sm">

                <div class="logo row no-gutters justify-content-center align-items-start justify-content-sm-start">

                    <div class="logo-text">
                        <div class="h4">Mi sala</div>
                    </div>
                </div>

            </div>
            <!-- / APP TITLE -->
        </div>
        <!-- / HEADER -->
        <div class="page-content-card p-10">
            <div class="form-row mt-2">
                <div class="col-8" style="border-style:outset;">
                    <div class="form-group row">
                        <h3 class="col-2 offset-5"><strong>Mi Sala </strong> </h3>
                    </div>
                    <div class="form-group row">
                        <div id="idMiSala" class="col-8 offset-2" style="border-style:inset;width:40%;height:200px">

                        </div>
                    </div>
                    <div class="form-group row">
                        <button type="submit" class="btn bg-deep-orange text-white btn-block col-8 offset-2">Crear sala</button>
                    </div>
                </div>
                <div class="col-4" style="border-style:outset;">
                    <div class="form-group row">
                        <h3 class="col-2 offset-4"><strong>Jugadores </strong> </h3>
                    </div>
                    <div class="form-group row">
                        <div id="idJugadores" class="col-10 offset-1" style="border-style:inset;overflow:auto;width:100%">
                            <table class="table table-responsive table-striped table-bordered col-12" style="width:500px;height:500px;padding:0px">
                                <thead>
                                    <tr>
                                        <th>Nick</th>
                                        <th>Agregar</th>
                                    </tr>
                                </thead>
                                <tbody id="idTbodyJugadores">
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>@item.Nombre</td>
                                            <td> <a id="@item.Id" class="btn bg-deep-orange text-white btn-block">Agregar</a></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<table cellpadding="0" cellspacing="0" border="0">
    <tr>
        <td>
            <div class="power_controls">
                <br />
                <br />
                <table class="power" cellpadding="10" cellspacing="0">
                    <tr>
                        <th align="center">Power</th>
                    </tr>
                    <tr>
                        <td width="78" align="center" id="pw3" onClick="powerSelected(3);">High</td>
                    </tr>
                    <tr>
                        <td align="center" id="pw2" onClick="powerSelected(2);">Med</td>
                    </tr>
                    <tr>
                        <td align="center" id="pw1" onClick="powerSelected(1);">Low</td>
                    </tr>
                </table>
                <br />
                <img id="spin_button" src="spin_off.png" alt="Spin" onClick="startSpin();" />
                <br /><br />
                &nbsp;&nbsp;<a href="#" onClick="resetWheel(); return false;">Play Again</a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(reset)
            </div>
        </td>
        <td width="438" height="582" class="the_wheel" align="center" valign="center">
            <canvas id="canvas" width="434" height="434">
                <p style="{color: white}" align="center">Sorry, your browser doesn't support canvas. Please try another.</p>
            </canvas>
        </td>
    </tr>
</table>

<script src="~/assets/Binit/js/Winwheel.min.js"></script>
<script src="http://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenMax.min.js"></script>
<script>
    $(document).ready(function () {
         
        window.setInterval(function () {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetPlayers", "Lobby")',
                success: function (data) {
                    var html = "";
                    if (data != null) {
                        for (var i = 0; i < data.length; i++) {
                            html +=
                            '<tr>' +
                            ' <td>' + data[i].Nombre + '</td>' +
                            ' <td> <a id="' + data[i].Id + '" class="btn bg-deep-orange text-white btn-block">Agregar</a></td>' +
                            '</tr>';
                            }
                             $("#idTbodyJugadores").html(html);
                        }
                    }
                });

        }, 4000);
    })

    // Create new wheel object specifying the parameters at creation time.
            let theWheel = new Winwheel({
                'outerRadius'     : 212,        // Set outer radius so wheel fits inside the background.
                'innerRadius'     : 75,         // Make wheel hollow so segments don't go all way to center.
                'textFontSize'    : 24,         // Set default font size for the segments.
                'textOrientation' : 'vertical', // Make text vertial so goes down from the outside of wheel.
                'textAlignment'   : 'outer',    // Align text to outside of wheel.
                'numSegments'     : 24,         // Specify number of segments.
                'segments'        :             // Define segments including colour and text.
                [                               // font size and test colour overridden on backrupt segments.
                   {'fillStyle' : '#ee1c24', 'text' : '300'},
                   {'fillStyle' : '#3cb878', 'text' : '450'},
                   {'fillStyle' : '#f6989d', 'text' : '600'},
                   {'fillStyle' : '#00aef0', 'text' : '750'},
                   {'fillStyle' : '#f26522', 'text' : '500'},
                   {'fillStyle' : '#000000', 'text' : 'BANKRUPT', 'textFontSize' : 16, 'textFillStyle' : '#ffffff'},
                   {'fillStyle' : '#e70697', 'text' : '3000'},
                   {'fillStyle' : '#fff200', 'text' : '600'},
                   {'fillStyle' : '#f6989d', 'text' : '700'},
                   {'fillStyle' : '#ee1c24', 'text' : '350'},
                   {'fillStyle' : '#3cb878', 'text' : '500'},
                   {'fillStyle' : '#f26522', 'text' : '800'},
                   {'fillStyle' : '#a186be', 'text' : '300'},
                   {'fillStyle' : '#fff200', 'text' : '400'},
                   {'fillStyle' : '#00aef0', 'text' : '650'},
                   {'fillStyle' : '#ee1c24', 'text' : '1000'},
                   {'fillStyle' : '#f6989d', 'text' : '500'},
                   {'fillStyle' : '#f26522', 'text' : '400'},
                   {'fillStyle' : '#3cb878', 'text' : '900'},
                   {'fillStyle' : '#000000', 'text' : 'BANKRUPT', 'textFontSize' : 16, 'textFillStyle' : '#ffffff'},
                   {'fillStyle' : '#a186be', 'text' : '600'},
                   {'fillStyle' : '#fff200', 'text' : '700'},
                   {'fillStyle' : '#00aef0', 'text' : '800'},
                   {'fillStyle' : '#ffffff', 'text' : 'LOOSE TURN', 'textFontSize' : 12}
                ],
                'animation' :           // Specify the animation to use.
                {
                    'type'     : 'spinToStop',
                    'duration' : 10,    // Duration in seconds.
                    'spins'    : 3,     // Default number of complete spins.
                    'callbackFinished' : alertPrize,
                    'callbackSound'    : playSound,   // Function to call when the tick sound is to be triggered.
                    'soundTrigger'     : 'pin'        // Specify pins are to trigger the sound, the other option is 'segment'.
                },
                'pins' :				// Turn pins on.
                {
                    'number'     : 24,
                    'fillStyle'  : 'silver',
                    'outerRadius': 4,
                }
            });
            // Loads the tick audio sound in to an audio object.
            let audio = new Audio('tick.mp3');
            // This function is called when the sound is to be played.
            function playSound()
            {
                // Stop and rewind the sound if it already happens to be playing.
                audio.pause();
                audio.currentTime = 0;
                // Play the sound.
                audio.play();
            }
            // Vars used by the code in this page to do power controls.
            let wheelPower    = 0;
            let wheelSpinning = false;
            // -------------------------------------------------------
            // Function to handle the onClick on the power buttons.
            // -------------------------------------------------------
            function powerSelected(powerLevel)
            {
                // Ensure that power can't be changed while wheel is spinning.
                if (wheelSpinning == false) {
                    // Reset all to grey incase this is not the first time the user has selected the power.
                    document.getElementById('pw1').className = "";
                    document.getElementById('pw2').className = "";
                    document.getElementById('pw3').className = "";
                    // Now light up all cells below-and-including the one selected by changing the class.
                    if (powerLevel >= 1) {
                        document.getElementById('pw1').className = "pw1";
                    }
                    if (powerLevel >= 2) {
                        document.getElementById('pw2').className = "pw2";
                    }
                    if (powerLevel >= 3) {
                        document.getElementById('pw3').className = "pw3";
                    }
                    // Set wheelPower var used when spin button is clicked.
                    wheelPower = powerLevel;
                    // Light up the spin button by changing it's source image and adding a clickable class to it.
                    document.getElementById('spin_button').src = "~/Content/Images/spin_on.png";

                    document.getElementById('spin_button').className = "clickable";
                }
            }
            // -------------------------------------------------------
            // Click handler for spin button.
            // -------------------------------------------------------
            function startSpin()
            {
                // Ensure that spinning can't be clicked again while already running.
                if (wheelSpinning == false) {
                    // Based on the power level selected adjust the number of spins for the wheel, the more times is has
                    // to rotate with the duration of the animation the quicker the wheel spins.
                    if (wheelPower == 1) {
                        theWheel.animation.spins = 3;
                    } else if (wheelPower == 2) {
                        theWheel.animation.spins = 6;
                    } else if (wheelPower == 3) {
                        theWheel.animation.spins = 10;
                    }
                    // Disable the spin button so can't click again while wheel is spinning.
                    document.getElementById('spin_button').src = "~/Content/Images/spin_off.png";

                    document.getElementById('spin_button').className = "";
                    // Begin the spin animation by calling startAnimation on the wheel object.
                    theWheel.startAnimation();
                    // Set to true so that power can't be changed and spin button re-enabled during
                    // the current animation. The user will have to reset before spinning again.
                    wheelSpinning = true;
                }
            }
            // -------------------------------------------------------
            // Function for reset button.
            // -------------------------------------------------------
            function resetWheel()
            {
                theWheel.stopAnimation(false);  // Stop the animation, false as param so does not call callback function.
                theWheel.rotationAngle = 0;     // Re-set the wheel angle to 0 degrees.
                theWheel.draw();                // Call draw to render changes to the wheel.
                document.getElementById('pw1').className = "";  // Remove all colours from the power level indicators.
                document.getElementById('pw2').className = "";
                document.getElementById('pw3').className = "";
                wheelSpinning = false;          // Reset to false to power buttons and spin can be clicked again.
            }
            // -------------------------------------------------------
            // Called when the spin animation has finished by the callback feature of the wheel because I specified callback in the parameters.
            // -------------------------------------------------------
            function alertPrize(indicatedSegment)
            {
                // Just alert to the user what happened.
                // In a real project probably want to do something more interesting than this with the result.
                if (indicatedSegment.text == 'LOOSE TURN') {
                    alert('Sorry but you loose a turn.');
                } else if (indicatedSegment.text == 'BANKRUPT') {
                    alert('Oh no, you have gone BANKRUPT!');
                } else {
                    alert("You have won " + indicatedSegment.text);
                }
            }
</script>

